// firebase.js
// إعداد Firebase + Firestore + Storage (موديول)
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
import {
  getFirestore,
  collection,
  addDoc,
  doc,
  deleteDoc,
  onSnapshot,
  query,
  orderBy,
  serverTimestamp
} from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
  listAll
} from "https://www.gstatic.com/firebasejs/9.23.0/firebase-storage.js";

const firebaseConfig = {
  apiKey: "AIzaSyCoUKMEMq-Nej6U6pzaIFREhkxJzp3-Rmo",
  authDomain: "art-82db5.firebaseapp.com",
  projectId: "art-82db5",
  storageBucket: "art-82db5.firebasestorage.app",
  messagingSenderId: "779448388955",
  appId: "1:779448388955:web:8ec4cbd8b26d1aca269e7e",
  measurementId: "G-ZNYQ2ZJH9W"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);

// Upload image to Storage, then add metadata doc to 'images' collection
export async function uploadImageAndSaveMetadata(file, meta = {}) {
  const path = `images/${Date.now()}_${file.name.replace(/\s+/g,'_')}`;
  const imgRef = storageRef(storage, path);
  await uploadBytes(imgRef, file);
  const url = await getDownloadURL(imgRef);

  // save metadata in Firestore
  const imageDoc = {
    name: file.name,
    url,
    path,
    createdAt: serverTimestamp(),
    ...meta
  };
  await addDoc(collection(db, "images"), imageDoc);
  return imageDoc;
}

// Get all images (realtime listener helper)
export function subscribeImages(onChange) {
  const q = query(collection(db, "images"), orderBy("createdAt", "desc"));
  return onSnapshot(q, (snapshot) => {
    const imgs = [];
    snapshot.forEach(doc => imgs.push({ id: doc.id, ...doc.data() }));
    onChange(imgs);
  });
}

// Add order
export async function addOrder(data) {
  const order = {
    name: data.name || "",
    phone: data.phone || "",
    message: data.message || "",
    image: data.image || "",
    createdAt: serverTimestamp()
  };
  await addDoc(collection(db, "orders"), order);
}

// Subscribe to orders realtime
export function subscribeOrders(onChange) {
  const q = query(collection(db, "orders"), orderBy("createdAt", "desc"));
  return onSnapshot(q, (snapshot) => {
    const orders = [];
    snapshot.forEach(doc => orders.push({ id: doc.id, ...doc.data() }));
    onChange(orders);
  });
}

// Delete an order (admin)
export async function deleteOrder(id) {
  await deleteDoc(doc(db, "orders", id));
}